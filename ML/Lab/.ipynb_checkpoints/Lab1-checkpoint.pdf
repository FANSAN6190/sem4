{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6e8e6ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Install Numpy\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3a6c6677",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.23.4\n"
     ]
    }
   ],
   "source": [
    "#2. Check the Numpy version installed\n",
    "print(np.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15973327",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3. Create 1-D Array in numpy:\n",
    "np_arr1=np.array([1,2,3,4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d85a38a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.dtype[int16]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#4. Use list to create 1D array (you may also specify data type i.e. dtype=’int16’)\n",
    "lis=[5,4,3,2,1]\n",
    "np_arr2=np.array(lis,dtype=\"int16\")\n",
    "type(np_arr2.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8188108",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5. User tuple to create 1D array\n",
    "tup=(1,2,3,4,5,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "196baed3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.dtype[int16]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#6. Use arange function to create 1D array of int\n",
    "np_arr2=np.array(tup,dtype=\"int16\")\n",
    "type(np_arr2.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2f7dff1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.], dtype=float32)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#7. Use arange function to create 1D array of float\n",
    "#dtype = symbols(int->'i', uint->'u',float->'f',double->'d',complex->'D',bool->'b'\n",
    "np_arr3=np.arange(10,dtype='f')\n",
    "np_arr3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9a52c2f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.   2.3  6.   3.1  5.   4.33]\n"
     ]
    }
   ],
   "source": [
    "#8. Create 1D array of mixed elements int and float, and print the array and see the output\n",
    "np_arr1=np.array([1,2.3,6,3.1,5,4.33])\n",
    "print(np_arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "577d840c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['asf' '2.3' '6' 'l' '5' '4.33']\n"
     ]
    }
   ],
   "source": [
    "#9. Create 1D array of mixed elements int, float, and str, then print the array and see the output\n",
    "np_arr1=np.array(['asf',2.3,6,'l',5,4.33])\n",
    "print(np_arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f8a2b580",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]]\n"
     ]
    }
   ],
   "source": [
    "#10. Create a 2D array of dimensions 2x2\n",
    "np_arr1=np.array([[1,2],[3,4]])\n",
    "print(np_arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5bed934",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape :  (2, 2)\n",
      "Size :  4\n",
      "ItemSize :  8\n",
      "Total Memory :  32\n"
     ]
    }
   ],
   "source": [
    "#11. Print the shape, size, and memory used by this array in bytes (use itemsize, or nbytes)\n",
    "print(\"Shape : \",np_arr1.shape)\n",
    "print(\"Size : \",np_arr1.size)\n",
    "print(\"ItemSize : \",np_arr1.itemsize)\n",
    "print(\"Total Memory : \",np_arr1.size*np_arr1.itemsize)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "87aff490",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n",
      "<class 'numpy.int64'>\n"
     ]
    }
   ],
   "source": [
    "#12. Check the type of any array variable\n",
    "print(type(np_arr1))\n",
    "print(type(np_arr1[1][1]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "78c1a955",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#13. Check indexing on array with help of examples\n",
    "np_arr1[1][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ff03e49a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 0  1  2  3]\n",
      "  [ 4  5  6  7]\n",
      "  [ 8  9 10 11]]\n",
      "\n",
      " [[12 13 14 15]\n",
      "  [16 17 18 19]\n",
      "  [20 21 22 23]]]\n"
     ]
    }
   ],
   "source": [
    "#14. Using arange function create an 3D array of dimensions = (2,3,4) , first element of this array is 0 and last element is 23 in increasing order, store this array in a variable b.\n",
    "b=np.arange(24).reshape(2,3,4)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7f52db57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3]\n",
      " [ 4  5  6  7]\n",
      " [ 8  9 10 11]]\n"
     ]
    }
   ],
   "source": [
    "#15. What index can produce output:\n",
    "#    array([[ 0, 1, 2, 3],\n",
    "#           [ 4, 5, 6, 7],\n",
    "#           [ 8, 9, 10, 11]])\n",
    "print(b[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2229e469",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "#16. What index can produce output: 0\n",
    "print(b[0][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "88ad3223",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 5, 6, 7])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#17. What index can produce output: array([4, 5, 6, 7])\n",
    "b[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e7c09fe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0, 12])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#18. What index can produce output: array([0,12])\n",
    "b[:,0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "1e914419",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4, 6]])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#19. What index can produce output: array([4,6])\n",
    "b[:1,1,::2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "e348c12b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  5,  9],\n",
       "       [13, 17, 21]])"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#20. Check the output of b[… , 1]\n",
    "b[..., 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "edc75e4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 5, 9])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#21. What index can produce output: array( [1, 5, 9] )\n",
    "b[0,:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "ea815368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3,  7, 11])"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#22. What index can produce output: array([3,7,11])\n",
    "b[0,:,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "15b59310",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3,  7, 11])"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#23. What index can produce output: array([11, 7,3])\n",
    "b[0,-3:,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "f7cc5196",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3, 11])"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#24. What index can produce output: array([3,11])\n",
    "b[0,::2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e413732b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eccff626",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
